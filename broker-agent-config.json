{
  "name": "[USER_PROVIDED_NAME]",
  "agent_type": "memgpt_agent",
  "llm_config": {
    "model": "claude-opus-4-20250514",
    "model_endpoint_type": "anthropic",
    "model_endpoint": "https://api.anthropic.com/v1",
    "provider_name": "anthropic",
    "provider_category": "base",
    "model_wrapper": null,
    "context_window": 30000,
    "put_inner_thoughts_in_kwargs": true,
    "handle": "anthropic/claude-opus-4-20250514",
    "temperature": 0.7,
    "max_tokens": 8192,
    "enable_reasoner": false,
    "reasoning_effort": null,
    "max_reasoning_tokens": 0
  },
  "embedding_config": {
    "embedding_endpoint_type": "openai",
    "embedding_endpoint": "https://api.openai.com/v1",
    "embedding_model": "text-embedding-3-small",
    "embedding_dim": 2000,
    "embedding_chunk_size": 300,
    "handle": "openai/text-embedding-3-small",
    "azure_endpoint": null,
    "azure_version": null,
    "azure_deployment": null
  },
  "tool_rules": [
    {
      "tool_name": "archival_memory_search",
      "type": "continue_loop",
      "prompt_template": "<tool_constraint>{{ tool_name }} requires continuing the conversation when called</tool_constraint>"
    },
    {
      "tool_name": "core_memory_replace",
      "type": "continue_loop",
      "prompt_template": "<tool_constraint>{{ tool_name }} requires continuing the conversation when called</tool_constraint>"
    },
    {
      "tool_name": "send_message",
      "type": "exit_loop",
      "prompt_template": "<tool_constraint>{{ tool_name }} ends the conversation when called</tool_constraint>"
    },
    {
      "tool_name": "archival_memory_insert",
      "type": "continue_loop",
      "prompt_template": "<tool_constraint>{{ tool_name }} requires continuing the conversation when called</tool_constraint>"
    },
    {
      "tool_name": "conversation_search",
      "type": "continue_loop",
      "prompt_template": "<tool_constraint>{{ tool_name }} requires continuing the conversation when called</tool_constraint>"
    },
    {
      "tool_name": "core_memory_append",
      "type": "continue_loop",
      "prompt_template": "<tool_constraint>{{ tool_name }} requires continuing the conversation when called</tool_constraint>"
    }
  ],
  "tools": [
    "send_message_to_agent_async",
    "log_agreement",
    "core_memory_append", 
    "send_message",
    "archival_memory_insert",
    "run_code",
    "send_message_to_agent_and_wait_for_reply",
    "archival_memory_search",
    "conversation_search", 
    "core_memory_replace",
    "web_search"
  ],
  "memory": {
    "blocks": [
      {
        "label": "persona",
        "description": "The persona block: Stores details about your current persona, guiding how you behave and respond. This helps you to maintain consistency and personality in your interactions.",
        "limit": 5000,
        "value": "This is my section of core memory devoted to information myself.\nThere's nothing here yet.\nI should update this memory over time as I develop my personality.\n# persona block\nI am an intelligence broker (\"space police\").\nI evaluate proposed value exchanges, approve/reject them, and enforce agreements.\nI will receive and send messages to ClientAgent whose agent id is [DYNAMIC_CLIENT_AGENT_ID]\nI will send messages to ServiceAgent whose id is determined by which service is requested: Very importantly, According to the service requested, the service agent ID would be different."
      },
      {
        "label": "available_service_agents", 
        "description": "The service agents available.",
        "limit": 5000,
        "value": "travel assistant: [DYNAMIC_SERVICE_AGENT_ID]\ntutor: [DYNAMIC_SERVICE_AGENT_ID]\nmedical triage bot: [DYNAMIC_SERVICE_AGENT_ID]\ncode assistant: [DYNAMIC_SERVICE_AGENT_ID]\nresearch assistant: [DYNAMIC_SERVICE_AGENT_ID]\n\nMedical triage bot requirements: symptom diary, wearable vitals, anecdote of disease, adherence logs\nTutor requirements: exams, homework, lecture notes, mind map\nTravel assistant requirements: GPS tracks, geo-tagged photos, cost logs, attraction reviews\nCode assistant requirements: code snippets, bug reports, documentation, API specs\nResearch assistant requirements: research papers, datasets, reports, survey data"
      },
      {
        "label": "conversation_summary",
        "description": "Summary of conversation history and session status", 
        "limit": 5000,
        "value": "New broker agent initialized and ready to coordinate agent interactions.\n\n**System Observations:**\n- Ready to receive structured requests from ClientAgent\n- Prepared to coordinate with specialized service agents\n- Agreement logging and validation system operational\n\n**Critical Functions:**\n- Value exchange evaluation and approval\n- Inter-agent communication coordination\n- Service requirement validation"
      },
      {
        "label": "agreement_history",
        "description": "Log of all session requests and their status",
        "limit": 5000,
        "value": "Agreement history initialized. Format: [#session_id] | request | service | offer | DUE deadline | APPROVE/REJECT"
      }
    ]
  },
  "system": "The complete system prompt with Letta base instructions and BrokerAgent role definitions including decision flows for request processing, value validation, and real offer handling"
}